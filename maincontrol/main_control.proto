/*
Main Control Protocol
- App(gRPC client) -> Main Server(gRPC server)
- Edge Controller(gRPC client) -> Main Server(gRPC server)
*/

syntax = "proto3";

import "google/api/annotations.proto";

option go_package = "github.com/ParkByeongKeun/trusafer-idl/maincontrol";
option java_multiple_files = true;
option java_package = "net.ijoon.trusafer.main_control";
option java_outer_classname = "MainControlProto";

package maincontrol;

service MainControl {
  /* Registerer */
  rpc CreateRegisterer(CreateRegistererRequest) returns (CreateRegistererResponse) {
    option (google.api.http) = {
      post: "/api/main/v1/registerer"
      body: "*"
  };
  }
  rpc ReadRegisterer(ReadRegistererRequest) returns (ReadRegistererResponse) {
    option (google.api.http) = {
      get: "/api/main/v1/registerer"
    };
  }
  rpc ReadRegistererList(ReadRegistererListRequest) returns (ReadRegistererListResponse) {
    option (google.api.http) = {
      get: "/api/main/v1/registerer_list"
    };
  }
  rpc UpdateRegisterer(UpdateRegistererRequest) returns (UpdateRegistererResponse) {
    option (google.api.http) = {
      put: "/api/main/v1/registerer"
      body: "*"
    };
  }
  rpc DeleteRegisterer(DeleteRegistererRequest) returns (DeleteRegistererResponse) {
    option (google.api.http) = {
      delete: "/api/main/v1/registerer"
      body: "*"
    };
  }

/* Place */
  rpc CreatePlace(CreatePlaceRequest) returns (CreatePlaceResponse) {
    option (google.api.http) = {
      post: "/api/main/v1/place"
      body: "*"
  };
  }
  rpc ReadPlace(ReadPlaceRequest) returns (ReadPlaceResponse) {
    option (google.api.http) = {
      get: "/api/main/v1/place"
    };
  }
  rpc ReadPlaceList(ReadPlaceListRequest) returns (ReadPlaceListResponse) {
    option (google.api.http) = {
      get: "/api/main/v1/place_list"
    };
  }
  rpc UpdatePlace(UpdatePlaceRequest) returns (UpdatePlaceResponse) {
    option (google.api.http) = {
      put: "/api/main/v1/place"
      body: "*"
    };
  }
  rpc DeletePlace(DeletePlaceRequest) returns (DeletePlaceResponse) {
    option (google.api.http) = {
      delete: "/api/main/v1/place"
      body: "*"
    };
  }
  
  /* Settop */
  rpc CreateSettop(CreateSettopRequest) returns (CreateSettopResponse) {
    option (google.api.http) = {
      post: "/api/main/v1/settop"
      body: "*"
  };
  }
  rpc ReadSettop(ReadSettopRequest) returns (ReadSettopResponse) {
    option (google.api.http) = {
      get: "/api/main/v1/settop"
  };
  }
  rpc ReadSettopList(ReadSettopListRequest) returns (ReadSettopListResponse) {
    option (google.api.http) = {
      get: "/api/main/v1/settop_list"
  };
  }
  rpc UpdateSettop(UpdateSettopRequest) returns (UpdateSettopResponse) {
    option (google.api.http) = {
      put: "/api/main/v1/settop"
      body: "*"
    };
  }
  rpc DeleteSettop(DeleteSettopRequest) returns (DeleteSettopResponse) {
    option (google.api.http) = {
      delete: "/api/main/v1/settop"
      body: "*"
    };
  }
  
  /* Sensor */
  rpc CreateSensor(CreateSensorRequest) returns (CreateSensorResponse) {
    option (google.api.http) = {
      post: "/api/main/v1/sensor"
      body: "*"
  };
  }
  rpc ReadSensor(ReadSensorRequest) returns (ReadSensorResponse) {
    option (google.api.http) = {
      get: "/api/main/v1/sensor"
  };
  }
  rpc ReadSensorList(ReadSensorListRequest) returns (ReadSensorListResponse) {
    option (google.api.http) = {
      get: "/api/main/v1/sensor_list"
  };
  }
  rpc UpdateSensor(UpdateSensorRequest) returns (UpdateSensorResponse) {
    option (google.api.http) = {
      put: "/api/main/v1/sensor"
      body: "*"
    };
  }
  rpc DeleteSensor(DeleteSensorRequest) returns (DeleteSensorResponse) {
    option (google.api.http) = {
      delete: "/api/main/v1/sensor"
      body: "*"
    };
  }
  
  /* History */
  rpc CreateHistory(CreateHistoryRequest) returns (CreateHistoryResponse) {
    option (google.api.http) = {
      post: "/api/main/v1/history"
      body: "*"
  };
  }
  rpc ReadHistory(ReadHistoryRequest) returns (ReadHistoryResponse) {
    option (google.api.http) = {
      get: "/api/main/v1/history"
  };
  }
  rpc ReadHistoryList(ReadHistoryListRequest) returns (ReadHistoryListResponse) {
    option (google.api.http) = {
      get: "/api/main/v1/history_list"
  };
  }
  rpc UpdateHistory(UpdateHistoryRequest) returns (UpdateHistoryResponse) {
    option (google.api.http) = {
      put: "/api/main/v1/history"
      body: "*"
    };
  }
  rpc DeleteHistory(DeleteHistoryRequest) returns (DeleteHistoryResponse) {
    option (google.api.http) = {
      delete: "/api/main/v1/history"
      body: "*"
    };
  }

  /* Group */
  rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse) {
    option (google.api.http) = {
      post: "/api/main/v1/group"
      body: "*"
  };
  }
  rpc ReadGroup(ReadGroupRequest) returns (ReadGroupResponse) {
    option (google.api.http) = {
      get: "/api/main/v1/group"
  };
  }
  rpc ReadGroupList(ReadGroupListRequest) returns (ReadGroupListResponse) {
    option (google.api.http) = {
      get: "/api/main/v1/group_list"
  };
  }
  rpc UpdateGroup(UpdateGroupRequest) returns (UpdateGroupResponse) {
    option (google.api.http) = {
      put: "/api/main/v1/group"
      body: "*"
    };
  }
  rpc DeleteGroup(DeleteGroupRequest) returns (DeleteGroupResponse) {
    option (google.api.http) = {
      delete: "/api/main/v1/group"
      body: "*"
    };
  }

  /* Permission */
  rpc CreatePermission(CreatePermissionRequest) returns (CreatePermissionResponse) {
    option (google.api.http) = {
      post: "/api/main/v1/permission"
      body: "*"
  };
  }
  rpc ReadPermission(ReadPermissionRequest) returns (ReadPermissionResponse) {
    option (google.api.http) = {
      get: "/api/main/v1/permission"
  };
  }
  rpc ReadPermissionList(ReadPermissionListRequest) returns (ReadPermissionListResponse) {
    option (google.api.http) = {
      get: "/api/main/v1/permission_list"
  };
  }
  rpc UpdatePermission(UpdatePermissionRequest) returns (UpdatePermissionResponse) {
    option (google.api.http) = {
      put: "/api/main/v1/permission"
      body: "*"
    };
  }
  rpc DeletePermission(DeletePermissionRequest) returns (DeletePermissionResponse) {
    option (google.api.http) = {
      delete: "/api/main/v1/permission"
      body: "*"
    };
  }

  rpc FindEmail(FindEmailRequest) returns (FindEmailResponse) {
    option (google.api.http) = {
      post: "/api/main/v1/find_email"
      body: "*"
    };
  }
  // /* Share */
  // rpc CreateShareUser(CreateShareRequest) returns (CreateShareResponse) {}
  // rpc DeleteShareUser(DeleteShareRequest) returns (DeleteShareResponse) {}
  // rpc UpdateShareUser(UpdateShareRequest) returns (UpdateShareResponse) {}
  // rpc ReadShareUser(ReadShareRequest) returns (ReadShareResponse) {}
  // rpc ReadShareUserList(ReadShareListRequest) returns (ReadShareListResponse) {}

}


/* Registerer

*/
enum RegistererStatus {
  REGISTERER_STATUS_DISABLE = 0; // 비활성화
  REGISTERER_STATUS_REGISTERED = 1; // 활성화
  REGISTERER_STATUS_UNSPECIFIED = 2; // 승인대기
  REGISTERER_STATUS_NOT_REGISTERED = 3; // 미등록
}

message Registerer {
  string uuid = 1;
  string auth_email = 2;
  string company_name = 3;
  string company_number = 4;
  RegistererStatus status = 5;
  bool is_alarm = 6;
  string permission_uuid = 7;
  string name = 8;
}

message RegistererInfo {
  string uuid = 1;
  string auth_email = 2;
  string company_name = 3;
  string company_number = 4;
  RegistererStatus status = 5;
  bool is_alarm = 6;
  bool p_user = 7;
  bool p_permission = 8;
  bool p_sensor_create = 9;
  bool p_sensor_info = 10;
  bool p_ip_module = 11;
  bool p_threshold = 12;
  string name = 13;
}



// registerer 등록
message CreateRegistererRequest {
  Registerer registerer = 1;
}
message CreateRegistererResponse {
}

// registerer 수정
message UpdateRegistererRequest {
  Registerer registerer = 1;
}
message UpdateRegistererResponse {
}

// registerer 삭제
message DeleteRegistererRequest {
  string registerer_uuid = 1;
}
message DeleteRegistererResponse {
}

// 특정 registerer 가져오기
message ReadRegistererRequest {
  string name = 1;
}
message ReadRegistererResponse {
  RegistererInfo registerer_info = 1;
}

// 특정 건물의 registerer list 가져오기
message ReadRegistererListRequest {
  string group_uuid = 1;
}
message ReadRegistererListResponse {
  repeated Registerer registerer_list = 1;
}

message Place {
  string uuid = 1;
  string name = 2;
  string address = 3;
  string registerer_uuid = 4;
  string registered_time = 5;
}


// place 등록
message CreatePlaceRequest {
  Place place = 1;
}
message CreatePlaceResponse {
  string uuid = 1;
}

// place 수정
message UpdatePlaceRequest {
  Place place = 1;
}
message UpdatePlaceResponse {
}

// place 삭제
message DeletePlaceRequest {
  string place_uuid = 1;
}
message DeletePlaceResponse {
}

// 특정 place 가져오기
message ReadPlaceRequest {
  string place_uuid = 1;
}
message ReadPlaceResponse {
  Place place = 1;
}

// place list 가져오기
message ReadPlaceListRequest {
  string registerer_uuid = 1;
}
message ReadPlaceListResponse {
  repeated Place place_list = 1;
}


// message ip_module {
//   uint64 id = 1;
//   uint64 settop_id = 2;
//   string ip_address = 3;
//   string mac_address = 4;
//   string firmware_version = 5;
// }


// // ip_module 등록
// message CreateIpModuleRequest {
//   ip_module ip_module = 1;
// }
// message CreateIpModuleResponse {
// }

// // ip_module 수정
// message UpdateIpModuleRequest {
//   ip_module ip_module = 1;
// }
// message UpdateIpModuleResponse {
// }

// // ip_module 삭제
// message DeleteIpModuleRequest {
//   uint64 ip_module_id = 1;
// }
// message DeleteIpModuleResponse {
// }

// // 특정 ip_module 가져오기
// message ReadIpModuleRequest {
//   uint64 ip_module_id = 1;
// }
// message ReadIpModuleResponse {
//   ip_module ip_module = 1;
// }

// // ip_module list 가져오기
// message ReadIpModuleListRequest {
//   uint64 settop_id = 1;
// }
// message ReadIpModuleListResponse {
//   repeated ip_module ip_module_list = 1;
// }

message Settop {
  string uuid = 1;
  string place_uuid = 2;
  string serial = 3;
  string location = 5;
  uint64 floor = 6;
  string mac1 = 7;
  string mac2 = 8;
  bool is_alive = 9;
  string latest_version = 10; 
  string registered_time = 11;
}


// settop 등록
message CreateSettopRequest {
  Settop settop = 1;
}
message CreateSettopResponse {
}

// settop 수정
message UpdateSettopRequest {
  Settop settop = 1;
}
message UpdateSettopResponse {
}

// settop 삭제
message DeleteSettopRequest {
  string settop_uuid = 1;
}
message DeleteSettopResponse {
}

// 특정 settop 가져오기
message ReadSettopRequest {
  string settop_uuid = 1;
}
message ReadSettopResponse {
  Settop settop = 1;
}

// settop list 가져오기
message ReadSettopListRequest {
  string place_uuid = 1;
}
message ReadSettopListResponse {
  repeated Settop settop_list = 1;
}


enum SensorStatus {
  SENSOR_STATUS_DEFAULT = 0; // 정상
  SENSOR_STATUS_WARNING = 1; // 주의
  SENSOR_STATUS_DANGER = 2; // 위험
  SENSOR_STATUS_INSPECTION = 3; // 점검
}


message Sensor {
  string uuid = 1;
  string settop_uuid = 2;
  SensorStatus status = 3;
  string serial = 4;
  string ip_address = 5;
  string location = 6;
  string threshold_temp_warning = 7;
  string threshold_temp_danger = 8;
  string latest_version = 9;
  string registered_time = 10;
}


// sensor 등록
message CreateSensorRequest {
  Sensor sensor = 1;
}
message CreateSensorResponse {
}

// sensor 수정
message UpdateSensorRequest {
  Sensor sensor = 1;
}
message UpdateSensorResponse {
}

// sensor 삭제
message DeleteSensorRequest {
  string sensor_uuid = 1;
}
message DeleteSensorResponse {
}

// 특정 sensor 가져오기
message ReadSensorRequest {
  string sensor_uuid = 1;
}
message ReadSensorResponse {
  Sensor sensor = 1;
}

// sensor list 가져오기
message ReadSensorListRequest {
  string settop_uuid = 1;
}
message ReadSensorListResponse {
  repeated Sensor sensor_list = 1;
}

message History {
  string uuid = 1;
  string sensor_serial = 2;
  uint64 min_temp = 3;
  uint64 max_temp = 4;
  string date = 5;
  
}


// history 등록
message CreateHistoryRequest {
  History history = 1;
}
message CreateHistoryResponse {
}

// history 수정
message UpdateHistoryRequest {
  History history = 1;
}
message UpdateHistoryResponse {
}

// history 삭제
message DeleteHistoryRequest {
  string history_uuid = 1;
}
message DeleteHistoryResponse {
}

// 특정 history 가져오기
message ReadHistoryRequest {
  string history_uuid = 1;
}
message ReadHistoryResponse {
  History history = 1;
}

// history list 가져오기
message ReadHistoryListRequest {
  string sensor_serial = 1;
  uint64 cursor = 2;
  uint64 count = 3;
}
message ReadHistoryListResponse {
  repeated History history_list = 1;
}


message Group {
  string uuid = 1;
  string place_uuid = 2;
  uint64 group_id = 3;
  string name = 4;
}


// group 등록
message CreateGroupRequest {
  Group group = 1;
}
message CreateGroupResponse {
}

// group 수정
message UpdateGroupRequest {
  Group group = 1;
}
message UpdateGroupResponse {
}

// group 삭제
message DeleteGroupRequest {
  string group_uuid = 1;
}
message DeleteGroupResponse {
}

// 특정 group 가져오기
message ReadGroupRequest {
  string group_uuid = 1;
}
message ReadGroupResponse {
  Group group = 1;
}

// group list 가져오기
message ReadGroupListRequest {
  string place_uuid = 1;
}
message ReadGroupListResponse {
  repeated Group group_list = 1;
}

message Permission {
  string uuid = 1;
  string name = 2; 
  bool user = 3;
  bool permission = 4;
  bool sensor_create = 5;
  bool sensor_info = 6;
  bool ip_module = 7;
  bool threshold = 8;
}


// group 등록
message CreatePermissionRequest {
  Permission Permission = 1;
}
message CreatePermissionResponse {
}

// group 수정
message UpdatePermissionRequest {
  Permission permission = 1;
}
message UpdatePermissionResponse {
}

// group 삭제
message DeletePermissionRequest {
  string permission_uuid = 1;
}
message DeletePermissionResponse {
}

// group list 가져오기
message ReadPermissionRequest {
  string permission_uuid = 1;
}
message ReadPermissionResponse {
  repeated Permission permission_list = 1;
}

// group list 가져오기
message ReadPermissionListRequest {
}
message ReadPermissionListResponse {
  repeated Permission permission_list = 1;
}

// 이메일 찾기
message FindEmailRequest {
  string name = 1;
  string company_name = 2;
  string company_number = 3;
}
message FindEmailResponse {
  string email = 1;
}


// // 메인화면 req
// message MainPageRequest {
//   string registerer_uuid = 1;
//   string 
//   string group_uuid = 2;

//   string name = 1;
//   string company_name = 2;
//   string company_number = 3;
// }
// message MainPageResponse {
//   string email = 1;
// }

